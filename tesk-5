Given an integer array A (1-indexed) with even length n. You can do the following operation as many times as you want:
* Choose a pair of positions 2k−1 and 2k and multiply both A2k−1 and A2k​ by −1.
* 
After finishing your operations, you must compute the maximum subarray sum of the resulting array. Maximize this value.

Standard input
The first line contains an integer T, the number of test cases.
The following lines describe t test cases. The first line of each test case contains an even integer Ni​, the length of the array. The second line contains Ni​ integers Aj​, the j-th integer is the j-th element of the array.

Standard output
Print t lines, the i-th line must contain the answer to the i-th test case.

Constraints and notes
* 1 ≤ *T *≤ 10^5.
* 1 ≤ i=1∑ T Ni ≤ 4∗10^5
* 2 ≤ *Ni *​ ≤ 2∗10^5 for every i=1,…,T
* Ni​ is even for every i=1,…,T
* ∣Aj∣≤ 10^4 for every valid j.

create code with C++

input:
3
4
5 -10 7 -2
2
7 -8
2
5 4

output:
17
8
9

explanation:
For the first test case, it's possible to apply the operation on position 2, which gives the array (−5,10,7,−2) and its maximum subarray sum is 10+7=17.

For the second test case, it's possible to apply the operation on position 2, which gives the array (−7,8) and its maximum subarray sum is 8.

For the third test case, there is no need to apply the operation since all the values are positive, so the maximum subarray sum is 5+4=9.


In the final hours of IEEExtreme, you're tasked with a challenge involving arrays and rectangles. You are given an array A of N integers representing heights. Your objective is to determine the largest possible area of a rectangle that can be formed using a contiguous subarray of A.
A rectangle is defined by selecting two indices l and r (with 1≤l≤r≤N), and choosing a height h such that h is not greater than any of the elements between l and r, inclusive. The area of the rectangle is then calculated as  (r−l+1)×h.
Additionally, you have a special ability: you can modify the value of any element in the array once to any positive integer between 1 and X. After making this one modification, you need to determine the maximum possible area of any rectangle that can be formed.
Standard input
The first line contains two integers N and X, the number of elements in the array and the maximum value that you can set on an element of the array.
The second line contains N integers representing the heights of the elements Ai in the array.
Standard output
Output a single integer representing the maximum area of a rectangle that can be formed after modifying at most one element of the array.
Constraints and notes
•	1≤N≤106.
•	1≤X≤106.
•	1≤Ai≤106 for every i=1,…,N.

with Example
Input 1 :
5 2
3 4 2 4 3
Output 1 :
10
Explanation 1 :
It's possible not to modify the array and then choose h=2h=2 for the whole array, which gives 2×5=102×5=10 as the maximum area.

Input 2 :
5 5
3 4 1 4 3
Output 2 :
15
Explanation 2 :
It's possible to modify the third position of array to 33 and then choose h=3h=3 for the whole array, which gives 3×5=153×5=15 as the maximum area.

create the C++ Source Code